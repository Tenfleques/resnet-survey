{"version":3,"sources":["Stage/Select.js","Stage/Image.js","Stage/Stage.js","App.js","serviceWorker.js","index.js"],"names":["Select","props","className","htmlFor","name","select","caption","onChange","id","defaultValue","value","options","map","v","i","key","label","Image","src","alt","Stage","state","hyper_params","images","root","handleSelectChange","bind","this","collectImageNames","layers","cifar","test_images","train_images","metrics","hp","is_image","length","test_image","push","src_train","train_image","selects","ev","target","selectedIndex","setState","pkg","appname","description","renderHyperControls","renderImageControl","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8+DAsBeA,EApBA,SAACC,GACZ,OACI,yBAAKC,UAAU,cACX,2BAAOC,QAASF,EAAMG,MAAOH,EAAMI,OAAOC,SAC1C,4BACIJ,UAAU,eACVK,SAAUN,EAAMM,SAChBC,GAAIP,EAAMG,KACVA,KAAMH,EAAMG,KACZK,aAAcR,EAAMI,OAAOK,OAGvBT,EAAMI,OAAOM,QAAQC,KAAI,SAACC,EAAEC,GACxB,OAAO,4BAAQC,IAAKD,EAAGJ,MAAOG,EAAEH,OAAQG,EAAEG,aCLnDC,EARD,SAAChB,GACX,OACI,yBAAKC,UAAU,sBACX,4BAAKD,EAAMG,MACX,yBAAKF,UAAU,gDAAiDgB,IAAKjB,EAAMiB,IAAKC,IAAI,O,cCgGjFC,E,YA9FX,WAAYnB,GAAQ,IAAD,8BACf,4CAAMA,KACDoB,MAAQ,CACTC,eACAC,OAAS,CACLC,KAAO,iBAGf,EAAKC,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBARX,E,kFAYf,OAAOC,KAAKC,kBAAkBD,KAAKN,MAAME,OAAQI,KAAKN,MAAMC,gB,wCAG9CC,EAAQD,GACtB,IAAIE,EAAQD,EAAOC,KACL,UAAYF,EAAaO,OAAOnB,MAAQ,UAC7BY,EAAaQ,MAAMpB,MAExCqB,EAAc,GACdC,EAAe,GACfC,EAAU,CACN,iBACA,iBAGR,IAAK,IAAIC,KAAMZ,EACX,GAAGA,EAAaY,GAAIC,UAAYb,EAAaY,GAAIxB,MAC7C,IAAK,IAAII,EAAI,EAAGA,EAAImB,EAAQG,SAAUtB,EAAE,CACpC,IAAIV,EAAOkB,EAAaY,GAAIxB,MAAQuB,EAAQnB,GAExCI,EAAMM,EAAO,SAAUpB,EAAO,OAE9BiC,EAAa,kBAAC,EAAD,CAAOtB,IAAK,cAAgBD,EAAIoB,EAAIhB,IAAKA,EAAKd,KAAM,QAAUA,IAC/E2B,EAAYO,KAAKD,GAGjB,IAAIE,EAAYf,EAAO,UAAYpB,EAAO,OAEtCoC,EAAc,kBAAC,EAAD,CAAOzB,IAAM,cAAgBD,EAAIoB,EAAIhB,IAAKqB,EAAWnC,KAAM,SAAWA,IACxF4B,EAAaM,KAAKE,GAI9B,OAEIT,I,4CAIJ,IAAIU,EAAU,GACd,IAAK,IAAI3B,KAAKa,KAAKN,MAAMC,aACrBmB,EAAQH,KAAK,kBAAC,EAAD,CACGvB,IAAK,UAAYD,EACjBT,OAAQiB,EAAaR,GACrBP,SAAUoB,KAAKF,mBACfrB,KAAMU,KAG1B,OAAO2B,I,yCAEQC,GACf,IAAIpB,EAAeK,KAAKN,MAAMC,aAE9BA,EAAaoB,EAAGC,OAAOvC,MAAMM,MAAQgC,EAAGC,OAAOhC,QAAQ+B,EAAGC,OAAOC,eAAelC,MAEhFiB,KAAKkB,SAAS,CAACvB,mB,+BAGf,OACI,yBAAKpB,UAAU,OACX,yBAAKA,UAAU,0BACX,wBAAIA,UAAU,qBAAd,qCACuC4C,EAAIC,SAE3C,uBAAG7C,UAAU,+BACR4C,EAAIE,cAIb,yBAAK9C,UAAU,0CACVyB,KAAKsB,uBAEV,yBAAK/C,UAAU,4BACX,yBAAKA,UAAU,OACVyB,KAAKuB,4B,GAvFVC,aCSLC,G,6LARX,OACE,yBAAKlD,UAAU,uBACb,kBAAC,EAAD,W,GAJUiD,cCMEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8c95a56e.chunk.js","sourcesContent":["import React from 'react';\n\nconst Select = (props) => {\n    return (\n        <div className=\"form-group\">\n            <label htmlFor={props.name}>{props.select.caption}</label>\n            <select \n                className=\"form-control\" \n                onChange={props.onChange}\n                id={props.name}\n                name={props.name}\n                defaultValue={props.select.value}\n                >\n                {\n                    props.select.options.map((v,i) => {\n                        return <option key={i} value={v.value}>{v.label}</option>\n                    })\n                }\n            </select>\n        </div>\n    );    \n}\nexport default Select\n  \n  ","import React from 'react';\n\nconst Image = (props) => {\n    return (\n        <div className=\"col-md-10 col-lg-6\">\n            <h4>{props.name}</h4>\n            <img className=\"img-thumbnail border-0 img-fluid  float-right\"  src={props.src} alt=\"\" />\n        </div>        \n    );    \n}\nexport default Image\n  \n  ","import React, { Component } from 'react';\nimport Select from \"./Select\"\nimport Image from \"./Image\"\nimport hyper_params from \"./hyper_params\"\nimport pkg from \"../Configs/package\"\n\n\nclass Stage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hyper_params,\n            images : {\n                root : \"logs/charts/\"\n            }\n        }\n        this.handleSelectChange = this.handleSelectChange.bind(this)\n    }\n\n    renderImageControl(){\n        return this.collectImageNames(this.state.images, this.state.hyper_params);\n    }\n    \n    collectImageNames(images, hyper_params){\n        let root =  images.root \n                    + \"resnet-\" + hyper_params.layers.value + \"/\"\n                    + \"cifar-\" + hyper_params.cifar.value \n                    ;\n        let test_images = [];\n        let train_images = [];\n        let metrics = [\n                \"_loss_val_mean\",\n                \"_acc_val_mean\"\n            ];\n        \n        for (let hp in hyper_params){\n            if(hyper_params[hp].is_image && hyper_params[hp].value){\n                for (let i = 0; i < metrics.length; ++i){\n                    let name = hyper_params[hp].value + metrics[i];\n\n                    let src = root + \"-test_\" +name + \".png\"\n    \n                    let test_image = <Image key={\"test-image-\" + i + hp} src={src} name={\"Test \" + name}/>\n                    test_images.push(test_image);\n\n\n                    let src_train = root + \"-train_\" + name + \".png\"\n    \n                    let train_image = <Image key ={\"test-image-\" + i + hp} src={src_train} name={\"Train \" + name}/>\n                    train_images.push(train_image);\n                } \n            }    \n        }    \n        return (\n            train_images,\n            test_images\n        )\n    }\n    renderHyperControls(){\n        let selects = []\n        for (var i in this.state.hyper_params){\n            selects.push(<Select \n                            key={\"select-\" + i} \n                            select={hyper_params[i]} \n                            onChange={this.handleSelectChange}\n                            name={i}\n                            />)\n        }\n        return selects;\n    }\n    handleSelectChange(ev){\n        let hyper_params = this.state.hyper_params;\n\n        hyper_params[ev.target.name].value = ev.target.options[ev.target.selectedIndex].value;\n\n        this.setState({hyper_params})\n    }\n    render() {\n        return (\n            <div className=\"row\">\n                <div className=\"bg-primary col-12 pt-3\">\n                    <h3 className=\"col-12 text-white\">\n                        Hyper-parameter investigation for {pkg.appname}\n                    </h3>\n                    <p className=\"text-lead col-12 text-white\">\n                        {pkg.description}\n                    </p>\n                </div>\n                \n                <div className=\"knob-box col-12 col-md-6 col-lg-3 mt-4\">\n                    {this.renderHyperControls()}\n                </div>\n                <div className=\"col-12 col-md-6 col-lg-9\">\n                    <div className=\"row\">\n                        {this.renderImageControl()}\n                    </div>\n                </div>                \n            </div>\n        )\n    }\n}\n\nexport default Stage;","import React, { Component } from 'react';\nimport Stage from \"./Stage/Stage\"\nimport './Css/bootstrap.css';\nimport './Css/App.css';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App container-fluid\">\n        <Stage />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}